"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const assertions_1 = require("aws-cdk-lib/assertions");
const assert_1 = require("@aws-cdk/assert");
const pipeline_stack_1 = require("../lib/pipeline-stack");
const service_stack_1 = require("../lib/service-stack");
const billing_stack_1 = require("../lib/billing-stack");
const testEnv = {
    account: '123456789012',
    region: 'us-east-1',
};
test('Pipeline Stack', () => {
    const app = new cdk.App();
    const stack = new pipeline_stack_1.PipelineStack(app, 'TestStack', {
        env: testEnv,
    });
    const template = assertions_1.Template.fromStack(stack);
    expect(template.toJSON()).toMatchSnapshot();
});
test('Adding service stage', () => {
    // GIVEN
    const app = new cdk.App();
    const pipelineStack = new pipeline_stack_1.PipelineStack(app, 'PipelineStack', {
        env: testEnv,
    });
    const serviceStack = new service_stack_1.ServiceStack(app, 'ServiceStack', {
        env: testEnv,
        stageName: 'Test',
    });
    // WHEN
    const stage = pipelineStack.addServiceStage(serviceStack, 'Test');
    // THEN
    (0, assert_1.expect)(pipelineStack).to((0, assert_1.haveResourceLike)('AWS::CodePipeline::Pipeline', {
        Stages: (0, assert_1.arrayWith)((0, assert_1.objectLike)({
            Name: "Test"
        })),
    }));
});
test('Adding billing stack to stage', () => {
    // GIVEN
    const app = new cdk.App();
    const serviceStack = new service_stack_1.ServiceStack(app, 'ServiceStack', {
        env: testEnv,
        stageName: 'Test',
    });
    const pipelineStack = new pipeline_stack_1.PipelineStack(app, 'PipelineStack', {
        env: testEnv,
    });
    const billingStack = new billing_stack_1.BillingStack(app, 'BillingStack', {
        env: testEnv,
        budgetAmount: 5,
        emailAddress: 'test@example.com'
    });
    const stage = pipelineStack.addServiceStage(serviceStack, 'Test');
    console.log(`Adding billing stack ${billingStack.stackName} to stage ${stage?.stageName}`);
    console.log(Object.getOwnPropertyNames(Object.getPrototypeOf(pipelineStack)));
    // WHEN
    pipelineStack.addBillingStage(billingStack, stage);
    // THEN
    (0, assert_1.expect)(pipelineStack).to((0, assert_1.haveResourceLike)('AWS::CodePipeline::Pipeline', {
        Stages: (0, assert_1.arrayWith)((0, assert_1.objectLike)({
            Name: "Test",
            Actions: (0, assert_1.arrayWith)((0, assert_1.objectLike)({
                Name: "Billing_Update"
            }))
        }))
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwaWxpbmUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpcGlsaW5lLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFDbkMsdURBQWtEO0FBQ2xELDRDQUErRjtBQUMvRiwwREFBc0Q7QUFDdEQsd0RBQW9EO0FBQ3BELHdEQUFvRDtBQUVwRCxNQUFNLE9BQU8sR0FBb0I7SUFDN0IsT0FBTyxFQUFFLGNBQWM7SUFDdkIsTUFBTSxFQUFFLFdBQVc7Q0FDdEIsQ0FBQztBQUVGLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUM7UUFDN0MsR0FBRyxFQUFFLE9BQU87S0FDZixDQUFDLENBQUM7SUFDSCxNQUFNLFFBQVEsR0FBRyxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLFFBQVE7SUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMxQixNQUFNLGFBQWEsR0FBRyxJQUFJLDhCQUFhLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBQztRQUN6RCxHQUFHLEVBQUUsT0FBTztLQUNmLENBQUMsQ0FBQztJQUNILE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFDO1FBQ3RELEdBQUcsRUFBRSxPQUFPO1FBQ1osU0FBUyxFQUFFLE1BQU07S0FDcEIsQ0FBQyxDQUFDO0lBQ0gsT0FBTztJQUNQLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xFLE9BQU87SUFDUCxJQUFBLGVBQVMsRUFBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBQSx5QkFBZ0IsRUFBQyw2QkFBNkIsRUFBRTtRQUN4RSxNQUFNLEVBQUUsSUFBQSxrQkFBUyxFQUNiLElBQUEsbUJBQVUsRUFBQztZQUNQLElBQUksRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUNMO0tBQ0osQ0FBQyxDQUFDLENBQUM7QUFDUixDQUFDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7SUFDdkMsUUFBUTtJQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFCLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFDO1FBQ3RELEdBQUcsRUFBRSxPQUFPO1FBQ1osU0FBUyxFQUFFLE1BQU07S0FDcEIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUM7UUFDekQsR0FBRyxFQUFFLE9BQU87S0FDZixDQUFDLENBQUM7SUFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLDRCQUFZLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRTtRQUN2RCxHQUFHLEVBQUUsT0FBTztRQUNaLFlBQVksRUFBRSxDQUFDO1FBQ2YsWUFBWSxFQUFFLGtCQUFrQjtLQUNuQyxDQUFDLENBQUM7SUFDSCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVsRSxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixZQUFZLENBQUMsU0FBUyxhQUFhLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBRTNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlFLE9BQU87SUFDUCxhQUFhLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVuRCxPQUFPO0lBQ1AsSUFBQSxlQUFTLEVBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUEseUJBQWdCLEVBQUMsNkJBQTZCLEVBQUU7UUFDeEUsTUFBTSxFQUFFLElBQUEsa0JBQVMsRUFDYixJQUFBLG1CQUFVLEVBQUM7WUFDUCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxJQUFBLGtCQUFTLEVBQ2QsSUFBQSxtQkFBVSxFQUFDO2dCQUNQLElBQUksRUFBRSxnQkFBZ0I7YUFDekIsQ0FBQyxDQUNMO1NBQ0osQ0FBQyxDQUNMO0tBQ0osQ0FBQyxDQUFDLENBQUM7QUFDUixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJ2F3cy1jZGstbGliL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgYXJyYXlXaXRoLCBleHBlY3QgYXMgZXhwZWN0Q0RLLCBoYXZlUmVzb3VyY2VMaWtlLCBvYmplY3RMaWtlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCB7IFBpcGVsaW5lU3RhY2sgfSBmcm9tICcuLi9saWIvcGlwZWxpbmUtc3RhY2snO1xuaW1wb3J0IHsgU2VydmljZVN0YWNrIH0gZnJvbSAnLi4vbGliL3NlcnZpY2Utc3RhY2snO1xuaW1wb3J0IHsgQmlsbGluZ1N0YWNrIH0gZnJvbSAnLi4vbGliL2JpbGxpbmctc3RhY2snO1xuXG5jb25zdCB0ZXN0RW52OiBjZGsuRW52aXJvbm1lbnQgPSB7XG4gICAgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsXG4gICAgcmVnaW9uOiAndXMtZWFzdC0xJyxcbn07XG5cbnRlc3QoJ1BpcGVsaW5lIFN0YWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgUGlwZWxpbmVTdGFjayhhcHAsICdUZXN0U3RhY2snLHtcbiAgICAgICAgZW52OiB0ZXN0RW52LFxuICAgIH0pO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKTtcbiAgICBleHBlY3QodGVtcGxhdGUudG9KU09OKCkpLnRvTWF0Y2hTbmFwc2hvdCgpO1xufSk7XG5cbnRlc3QoJ0FkZGluZyBzZXJ2aWNlIHN0YWdlJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbiAgICBjb25zdCBwaXBlbGluZVN0YWNrID0gbmV3IFBpcGVsaW5lU3RhY2soYXBwLCAnUGlwZWxpbmVTdGFjaycse1xuICAgICAgICBlbnY6IHRlc3RFbnYsXG4gICAgfSk7XG4gICAgY29uc3Qgc2VydmljZVN0YWNrID0gbmV3IFNlcnZpY2VTdGFjayhhcHAsICdTZXJ2aWNlU3RhY2snLHtcbiAgICAgICAgZW52OiB0ZXN0RW52LFxuICAgICAgICBzdGFnZU5hbWU6ICdUZXN0JyxcbiAgICB9KTtcbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgc3RhZ2UgPSBwaXBlbGluZVN0YWNrLmFkZFNlcnZpY2VTdGFnZShzZXJ2aWNlU3RhY2ssICdUZXN0Jyk7XG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdENESyhwaXBlbGluZVN0YWNrKS50byhoYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVQaXBlbGluZTo6UGlwZWxpbmUnLCB7XG4gICAgICAgIFN0YWdlczogYXJyYXlXaXRoKFxuICAgICAgICAgICAgb2JqZWN0TGlrZSh7XG4gICAgICAgICAgICAgICAgTmFtZTogXCJUZXN0XCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgfSkpO1xufSk7XG5cblxudGVzdCgnQWRkaW5nIGJpbGxpbmcgc3RhY2sgdG8gc3RhZ2UnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuICAgIGNvbnN0IHNlcnZpY2VTdGFjayA9IG5ldyBTZXJ2aWNlU3RhY2soYXBwLCAnU2VydmljZVN0YWNrJyx7XG4gICAgICAgIGVudjogdGVzdEVudixcbiAgICAgICAgc3RhZ2VOYW1lOiAnVGVzdCcsXG4gICAgfSk7XG4gICAgY29uc3QgcGlwZWxpbmVTdGFjayA9IG5ldyBQaXBlbGluZVN0YWNrKGFwcCwgJ1BpcGVsaW5lU3RhY2snLHtcbiAgICAgICAgZW52OiB0ZXN0RW52LFxuICAgIH0pO1xuICAgIGNvbnN0IGJpbGxpbmdTdGFjayA9IG5ldyBCaWxsaW5nU3RhY2soYXBwLCAnQmlsbGluZ1N0YWNrJywge1xuICAgICAgICBlbnY6IHRlc3RFbnYsXG4gICAgICAgIGJ1ZGdldEFtb3VudDogNSxcbiAgICAgICAgZW1haWxBZGRyZXNzOiAndGVzdEBleGFtcGxlLmNvbSdcbiAgICB9KTtcbiAgICBjb25zdCBzdGFnZSA9IHBpcGVsaW5lU3RhY2suYWRkU2VydmljZVN0YWdlKHNlcnZpY2VTdGFjaywgJ1Rlc3QnKTtcblxuICAgIGNvbnNvbGUubG9nKGBBZGRpbmcgYmlsbGluZyBzdGFjayAke2JpbGxpbmdTdGFjay5zdGFja05hbWV9IHRvIHN0YWdlICR7c3RhZ2U/LnN0YWdlTmFtZX1gKTtcblxuICAgIGNvbnNvbGUubG9nKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihwaXBlbGluZVN0YWNrKSkpO1xuXG4gICAgLy8gV0hFTlxuICAgIHBpcGVsaW5lU3RhY2suYWRkQmlsbGluZ1N0YWdlKGJpbGxpbmdTdGFjaywgc3RhZ2UpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdENESyhwaXBlbGluZVN0YWNrKS50byhoYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVQaXBlbGluZTo6UGlwZWxpbmUnLCB7XG4gICAgICAgIFN0YWdlczogYXJyYXlXaXRoKFxuICAgICAgICAgICAgb2JqZWN0TGlrZSh7XG4gICAgICAgICAgICAgICAgTmFtZTogXCJUZXN0XCIsXG4gICAgICAgICAgICAgICAgQWN0aW9uczogYXJyYXlXaXRoKFxuICAgICAgICAgICAgICAgICAgICBvYmplY3RMaWtlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE5hbWU6IFwiQmlsbGluZ19VcGRhdGVcIlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICB9KSk7XG59KTtcbiAiXX0=