#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const pipeline_stack_1 = require("../lib/pipeline-stack");
const billing_stack_1 = require("../lib/billing-stack");
const service_stack_1 = require("../lib/service-stack");
const usEast1Env = { account: '975550358131', region: 'us-east-1' };
const euWest1Env = { account: '975550358131', region: 'eu-west-1' };
const account2Env = { account: '503561423934', region: 'us-east-1' };
const app = new cdk.App();
const pipelineStack = new pipeline_stack_1.PipelineStack(app, "PipelineStack", {
    env: usEast1Env
});
new billing_stack_1.BillingStack(app, "BillingStack", {
    env: usEast1Env,
    budgetAmount: 5,
    emailAddress: "davidnyaika2@gmail.com"
});
const serviceStackTest = new service_stack_1.ServiceStack(app, "ServiceStackTest", {
    env: usEast1Env,
    stageName: 'Test',
});
const serviceStackTest2 = new service_stack_1.ServiceStack(app, "ServiceStackTest2", {
    env: account2Env,
    stageName: 'Test',
});
const serviceStackProd = new service_stack_1.ServiceStack(app, "ServiceStackProd", {
    env: usEast1Env,
    stageName: 'Prod',
});
const serviceStackProdBakup = new service_stack_1.ServiceStack(app, "ServiceStackProdBackup", {
    env: euWest1Env,
    stageName: 'Prod',
});
const stageTest = pipelineStack.addServiceStage(serviceStackTest, 'Test');
pipelineStack.addServiceStage(serviceStackTest2, 'CrossAccountTest');
const prodStage = pipelineStack.addServiceStage(serviceStackProd, 'Prod');
pipelineStack.addServiceStage(serviceStackProdBakup, 'ProdBackup');
pipelineStack.addServiceIntegrationTestToStage(stageTest, serviceStackTest.serviceEndpointOutput.importValue);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwaWxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwaXBpbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx1Q0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLDBEQUFzRDtBQUN0RCx3REFBb0Q7QUFDcEQsd0RBQW9EO0FBR3BELE1BQU0sVUFBVSxHQUFnQixFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBQ2pGLE1BQU0sVUFBVSxHQUFnQixFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBRWpGLE1BQU0sV0FBVyxHQUFnQixFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBRWxGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sYUFBYSxHQUFDLElBQUksOEJBQWEsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFO0lBQ3hELEdBQUcsRUFBRSxVQUFVO0NBQ2xCLENBQUMsQ0FBQztBQUNILElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFO0lBQ2xDLEdBQUcsRUFBRSxVQUFVO0lBQ2YsWUFBWSxFQUFFLENBQUM7SUFDZixZQUFZLEVBQUUsd0JBQXdCO0NBQ3pDLENBQUMsQ0FBQTtBQUVGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSw0QkFBWSxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBQztJQUM5RCxHQUFHLEVBQUUsVUFBVTtJQUNmLFNBQVMsRUFBRSxNQUFNO0NBQ3BCLENBQUMsQ0FBQztBQUVILE1BQU0saUJBQWlCLEdBQUcsSUFBSSw0QkFBWSxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBQztJQUNoRSxHQUFHLEVBQUUsV0FBVztJQUNoQixTQUFTLEVBQUUsTUFBTTtDQUNwQixDQUFDLENBQUM7QUFFSCxNQUFNLGdCQUFnQixHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUM7SUFDOUQsR0FBRyxFQUFFLFVBQVU7SUFDZixTQUFTLEVBQUUsTUFBTTtDQUNwQixDQUFDLENBQUM7QUFFSCxNQUFNLHFCQUFxQixHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsd0JBQXdCLEVBQUM7SUFDekUsR0FBRyxFQUFFLFVBQVU7SUFDZixTQUFTLEVBQUUsTUFBTTtDQUNwQixDQUFFLENBQUM7QUFFSixNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzFFLGFBQWEsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUNyRSxNQUFNLFNBQVMsR0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3hFLGFBQWEsQ0FBQyxlQUFlLENBQUMscUJBQXFCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDbkUsYUFBYSxDQUFDLGdDQUFnQyxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBQaXBlbGluZVN0YWNrIH0gZnJvbSBcIi4uL2xpYi9waXBlbGluZS1zdGFja1wiO1xuaW1wb3J0IHsgQmlsbGluZ1N0YWNrIH0gZnJvbSBcIi4uL2xpYi9iaWxsaW5nLXN0YWNrXCI7XG5pbXBvcnQgeyBTZXJ2aWNlU3RhY2sgfSBmcm9tICcuLi9saWIvc2VydmljZS1zdGFjayc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJ2F3cy1jZGstbGliJztcblxuY29uc3QgdXNFYXN0MUVudjogRW52aXJvbm1lbnQgPSB7IGFjY291bnQ6ICc5NzU1NTAzNTgxMzEnLCByZWdpb246ICd1cy1lYXN0LTEnIH07XG5jb25zdCBldVdlc3QxRW52OiBFbnZpcm9ubWVudCA9IHsgYWNjb3VudDogJzk3NTU1MDM1ODEzMScsIHJlZ2lvbjogJ2V1LXdlc3QtMScgfTtcblxuY29uc3QgYWNjb3VudDJFbnY6IEVudmlyb25tZW50ID0geyBhY2NvdW50OiAnNTAzNTYxNDIzOTM0JywgcmVnaW9uOiAndXMtZWFzdC0xJyB9O1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3QgcGlwZWxpbmVTdGFjaz1uZXcgUGlwZWxpbmVTdGFjayhhcHAsIFwiUGlwZWxpbmVTdGFja1wiLCB7XG4gICAgZW52OiB1c0Vhc3QxRW52XG59KTtcbm5ldyBCaWxsaW5nU3RhY2soYXBwLCBcIkJpbGxpbmdTdGFja1wiLCB7XG4gICAgZW52OiB1c0Vhc3QxRW52LFxuICAgIGJ1ZGdldEFtb3VudDogNSxcbiAgICBlbWFpbEFkZHJlc3M6IFwiZGF2aWRueWFpa2EyQGdtYWlsLmNvbVwiXG59KVxuXG5jb25zdCBzZXJ2aWNlU3RhY2tUZXN0ID0gbmV3IFNlcnZpY2VTdGFjayhhcHAsIFwiU2VydmljZVN0YWNrVGVzdFwiLHtcbiAgICBlbnY6IHVzRWFzdDFFbnYsXG4gICAgc3RhZ2VOYW1lOiAnVGVzdCcsXG59KTtcblxuY29uc3Qgc2VydmljZVN0YWNrVGVzdDIgPSBuZXcgU2VydmljZVN0YWNrKGFwcCwgXCJTZXJ2aWNlU3RhY2tUZXN0MlwiLHtcbiAgICBlbnY6IGFjY291bnQyRW52LFxuICAgIHN0YWdlTmFtZTogJ1Rlc3QnLFxufSk7XG5cbmNvbnN0IHNlcnZpY2VTdGFja1Byb2QgPSBuZXcgU2VydmljZVN0YWNrKGFwcCwgXCJTZXJ2aWNlU3RhY2tQcm9kXCIse1xuICAgIGVudjogdXNFYXN0MUVudixcbiAgICBzdGFnZU5hbWU6ICdQcm9kJyxcbn0pO1xuXG5jb25zdCBzZXJ2aWNlU3RhY2tQcm9kQmFrdXAgPSBuZXcgU2VydmljZVN0YWNrKGFwcCwgXCJTZXJ2aWNlU3RhY2tQcm9kQmFja3VwXCIse1xuICAgIGVudjogZXVXZXN0MUVudixcbiAgICBzdGFnZU5hbWU6ICdQcm9kJyxcbn0gKTtcblxuY29uc3Qgc3RhZ2VUZXN0ID0gcGlwZWxpbmVTdGFjay5hZGRTZXJ2aWNlU3RhZ2Uoc2VydmljZVN0YWNrVGVzdCwgJ1Rlc3QnKTtcbnBpcGVsaW5lU3RhY2suYWRkU2VydmljZVN0YWdlKHNlcnZpY2VTdGFja1Rlc3QyLCAnQ3Jvc3NBY2NvdW50VGVzdCcpO1xuY29uc3QgcHJvZFN0YWdlPXBpcGVsaW5lU3RhY2suYWRkU2VydmljZVN0YWdlKHNlcnZpY2VTdGFja1Byb2QsICdQcm9kJyk7XG5waXBlbGluZVN0YWNrLmFkZFNlcnZpY2VTdGFnZShzZXJ2aWNlU3RhY2tQcm9kQmFrdXAsICdQcm9kQmFja3VwJyk7XG5waXBlbGluZVN0YWNrLmFkZFNlcnZpY2VJbnRlZ3JhdGlvblRlc3RUb1N0YWdlKHN0YWdlVGVzdCwgc2VydmljZVN0YWNrVGVzdC5zZXJ2aWNlRW5kcG9pbnRPdXRwdXQuaW1wb3J0VmFsdWUpOyJdfQ==